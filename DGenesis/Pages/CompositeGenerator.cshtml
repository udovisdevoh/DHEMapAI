@page
@model DGenesis.Pages.CompositeGeneratorModel
@{
    ViewData["Title"] = "Générateur de Forme Composite";
}

<link rel="stylesheet" href="~/css/polygon-visualizer.css" asp-append-version="true" />

<h1>@ViewData["Title"]</h1>
<p>Définissez un squelette (D-Graph), configurez les paramètres des pièces, et générez une forme complexe fusionnée.</p>

<div class="row">
    <div class="col-md-5">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input type="hidden" asp-for="ActivePresetKey" id="activePresetKeyInput" />

            <section>
                <h5>1. Squelette de la Forme (D-Graph)</h5>

                <div class="mb-2">
                    <label asp-for="PresetScale" class="form-label">Échelle des Préréglages</label>
                    <input type="number" id="presetScale" class="form-control" step="50" oninput="updatePreset()" asp-for="PresetScale">
                </div>

                @* Ajout des nouveaux boutons Y et X *@
                <div class="btn-group btn-group-sm mb-1" role="group">
                    <button type="button" class="btn btn-outline-secondary" id="preset-btn-L" onclick="setPreset('L')">L</button>
                    <button type="button" class="btn btn-outline-secondary" id="preset-btn-T" onclick="setPreset('T')">T</button>
                    <button type="button" class="btn btn-outline-secondary" id="preset-btn-Y" onclick="setPreset('Y')">Y</button>
                    <button type="button" class="btn btn-outline-secondary" id="preset-btn-Plus" onclick="setPreset('Plus')">+</button>
                    <button type="button" class="btn btn-outline-secondary" id="preset-btn-X" onclick="setPreset('X')">X</button>
                </div>
                <textarea asp-for="InputDGraphJson" class="json-output-area" style="height: 150px;"></textarea>
            </section>

            <section class="mt-3">
                <h5>2. Paramètres des Pièces Individuelles</h5>
                <p class="text-muted small">Utilisez le <a href="/DShapeGenerator" target="_blank">Générateur de Forme Simple</a> pour expérimenter avec les paramètres ci-dessous et voir leur effet sur une pièce.</p>

                <div class="form-group mb-2">
                    <label asp-for="GenParams.VertexCount" class="control-label"></label>
                    <input asp-for="GenParams.VertexCount" type="number" min="3" max="50" class="form-control" />
                </div>
                <div class="form-group mb-2">
                    <label asp-for="GenParams.Size" class="control-label"></label>
                    <input asp-for="GenParams.Size" type="number" min="32" max="1024" class="form-control" />
                </div>
            </section>

            <section class="mt-3">
                <h5>3. Générer</h5>
                <button type="submit" class="btn btn-primary w-100">Générer la Forme Composite</button>
            </section>
        </form>

        @if (Model.OutputDShapeJson != null)
        {
            <section class="mt-4">
                <h4>Résultat Fusionné (D-Shape)</h4>
                <hr />
                <textarea id="json-output" class="json-output-area" readonly>@Model.OutputDShapeJson</textarea>
                <button id="copy-json-btn" class="btn btn-secondary mt-2">Copier le JSON</button>
            </section>
        }
    </div>

    <div class="col-md-7">
        <h4>Visualisation</h4>
        <hr />
        <div id="shape-container" class="shape-container-box" style="height: 80vh;">
            @if (Model.OutputDShapeJson == null)
            {
                <div class="placeholder-text">La forme composite apparaîtra ici.</div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js"></script>
    <script src="~/js/polygon-visualizer.js" asp-append-version="true"></script>
    <script>
        const shapeData = @(Model.OutputDShapeJson != null ? Html.Raw(Model.OutputDShapeJson) : "null");

        if (shapeData) {
            const visualizer = new PolygonVisualizer("#shape-container");
            visualizer.render(shapeData, 0, 0);

            document.getElementById('copy-json-btn').addEventListener('click', () => {
                navigator.clipboard.writeText(JSON.stringify(shapeData, null, 2))
                    .then(() => {
                        const btn = document.getElementById('copy-json-btn');
                        const originalText = btn.textContent;
                        btn.textContent = 'Copié !';
                        setTimeout(() => { btn.textContent = originalText; }, 2000);
                    });
            });
        }

        let activePresetKey = '@Model.ActivePresetKey';
        const activePresetKeyInput = document.getElementById('activePresetKeyInput');

        const presetStructures = {
            'L': {
                nodes: [ {id: 0, x: 0, y: 0}, {id: 1, x: 0, y: 1}, {id: 2, x: 1, y: 0} ],
                edges: [ {s: 0, t: 1}, {s: 0, t: 2} ]
            },
            'T': {
                nodes: [ {id: 0, x: 0, y: 0}, {id: 1, x: 0, y: 1}, {id: 2, x: -1, y: 1}, {id: 3, x: 1, y: 1} ],
                edges: [ {s: 0, t: 1}, {s: 1, t: 2}, {s: 1, t: 3} ]
            },
            // NOUVEAU PRÉRÉGLAGE 'Y'
            'Y': {
                nodes: [ {id: 0, x: 0, y: 0}, {id: 1, x: 0, y: 1}, {id: 2, x: -0.7071, y: 1.7071}, {id: 3, x: 0.7071, y: 1.7071} ],
                edges: [ {s: 0, t: 1}, {s: 1, t: 2}, {s: 1, t: 3} ]
            },
            'Plus': {
                nodes: [ {id: 0, x: 0, y: 0}, {id: 1, x: 0, y: 1}, {id: 2, x: 0, y: -1}, {id: 3, x: 1, y: 0}, {id: 4, x: -1, y: 0} ],
                edges: [ {s: 0, t: 1}, {s: 0, t: 2}, {s: 0, t: 3}, {s: 0, t: 4} ]
            },
            // NOUVEAU PRÉRÉGLAGE 'X'
            'X': {
                nodes: [ {id: 0, x: 0, y: 0}, {id: 1, x: 0.7071, y: 0.7071}, {id: 2, x: -0.7071, y: 0.7071}, {id: 3, x: -0.7071, y: -0.7071}, {id: 4, x: 0.7071, y: -0.7071} ],
                edges: [ {s: 0, t: 1}, {s: 0, t: 2}, {s: 0, t: 3}, {s: 0, t: 4} ]
            }
        };

        function updatePreset() {
            const scale = parseFloat(document.getElementById('presetScale').value) || 400;
            const structure = presetStructures[activePresetKey];
            if (!structure) return;

            const dgraphObject = {
                nodes: structure.nodes.map(n => ({
                    id: n.id,
                    position: { x: n.x * scale, y: n.y * scale }
                })),
                edges: structure.edges.map(e => ({
                    source: e.s,
                    target: e.t
                }))
            };

            document.getElementById('InputDGraphJson').value = JSON.stringify(dgraphObject, null, 2);
        }

        function setPreset(key) {
            activePresetKey = key;
            activePresetKeyInput.value = key;

            document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove('active'));
            document.getElementById(`preset-btn-${key}`).classList.add('active');

            updatePreset();
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove('active'));
            const activeButton = document.getElementById(`preset-btn-${activePresetKey}`);
            if (activeButton) {
                activeButton.classList.add('active');
            }
            if (!document.getElementById('InputDGraphJson').value) {
                 updatePreset();
            }
        });

    </script>
}